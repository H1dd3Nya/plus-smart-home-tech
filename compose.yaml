services:
  kafka:
    image: confluentinc/confluent-local:7.4.3
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092" # for client connections
      - "9101:9101" # JMX
    restart: unless-stopped
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      CLUSTER_ID: 'K0EA9p0yEe6MkAAAAkKsEg'
    healthcheck:
      test: [ "CMD-SHELL", "kafka-broker-api-versions --bootstrap-server kafka:29092" ]
      interval: 5s
      timeout: 10s
      retries: 10

  kafka-init-topics:
    image: confluentinc/confluent-local:7.4.3
    container_name: kafka-init-topics
    depends_on:
      - kafka
    command: "bash -c \
                'kafka-topics --create --topic telemetry.sensors.v1 \
                             --partitions 1 --replication-factor 1 --if-not-exists \
                             --bootstrap-server kafka:29092 && \
                kafka-topics --create --topic telemetry.snapshots.v1 \
                             --partitions 1 --replication-factor 1 --if-not-exists \
                             --bootstrap-server kafka:29092 && \
                kafka-topics --create --topic telemetry.hubs.v1 \
                             --partitions 1 --replication-factor 1 --if-not-exists \
                             --bootstrap-server kafka:29092'"
    init: true

  analyzer-db:
    image: postgres:16.1
    container_name: postgres-analyzer
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: analyzer
      POSTGRES_USER: analyzer
      POSTGRES_DB: analyzer
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U analyzer -d analyzer" ]
      interval: 5s
      timeout: 5s
      retries: 5

  store-db:
    image: postgres:16.1
    container_name: store-db
    ports:
      - "6432:5432"
    environment:
      - POSTGRES_PASSWORD=store
      - POSTGRES_USER=store
      - POSTGRES_DB=store-db

  cart-db:
    image: postgres:16.1
    container_name: cart-db
    ports:
      - "7432:5432"
    environment:
      - POSTGRES_PASSWORD=cart
      - POSTGRES_USER=cart
      - POSTGRES_DB=cart-db


  warehouse-db:
    image: postgres:16.1
    container_name: warehouse-db
    ports:
      - "8432:5432"
    environment:
      - POSTGRES_PASSWORD=warehouse
      - POSTGRES_USER=warehouse
      - POSTGRES_DB=warehouse-db

  config-server:
    build: ./infra/config-server
    image: config-server
    container_name: config-server
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discovery-server:8761/eureka/"
    depends_on:
      discovery-server:
        condition: service_healthy
    volumes:
      - ./config:/config

  discovery-server:
    build: ./infra/discovery-server
    image: discovery-server
    container_name: discovery-server
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1" ]

  aggregator:
    build: ./telemetry/aggregator
    image: aggregator
    container_name: aggregator
    depends_on:
      config-server:
        condition: service_started
      discovery-server:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "aggregator"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discovery-server:8761/eureka/"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1" ]
      interval: 30s

  analyzer:
    build: ./telemetry/analyzer
    image: analyzer
    container_name: analyzer
    depends_on:
      config-server:
        condition: service_started
      analyzer-db:
        condition: service_started
      discovery-server:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "analyzer"
      SPRING_DATASOURCE_URL: jdbc:postgresql://analyzer-db:5432/analyzer
      SPRING_DATASOURCE_USER: analyzer
      SPRING_DATASOURCE_PASSWORD: analyzer
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discovery-server:8761/eureka/"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1" ]
      interval: 30s

  collector:
    build: ./telemetry/collector
    image: collector
    container_name: collector
    depends_on:
      config-server:
        condition: service_started
      discovery-server:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "collector"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://discovery-server:8761/eureka/"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1" ]
      interval: 30s

volumes:
  postgres_data: